whitespace     ::= [\t\n\r ]+
identifier     ::= [a-zA-Z_][a-zA-Z0-9_]*
integer        ::= [0-9]+
string         ::= "'" [^']* "'" | '"' [^"]* '"'
line_comment   ::= "//" [^\n]*
block_comment  ::= "/*" ([^*] | "*" [^/])* "*/"

program        ::= declaration*

declaration    ::= class_decl
                | namespace_decl
                | function_decl
                | variable_decl
                | statement

class_decl     ::= "class" identifier "{" class_member* "}"

class_member   ::= visibility_spec? (method_decl | field_decl)

visibility_spec::= "public" ":"
                | "private" ":"
                | "protected" ":"

method_decl    ::= identifier "(" parameter_list? ")" block

field_decl     ::= identifier ("=" expression)? ";"

parameter_list ::= identifier ("," identifier)*

namespace_decl ::= "namespace" identifier "{" declaration* "}"

function_decl  ::= "fn" identifier "(" parameter_list? ")" block

variable_decl  ::= "let" identifier "=" expression ";"

statement      ::= expression_stmt
                | block
                | if_stmt
                | loop_stmt
                | for_stmt
                | break_stmt
                | return_stmt

expression_stmt::= expression ";"
block          ::= "{" statement* "}"
if_stmt        ::= "if" "(" expression ")" statement ("else" statement)?
loop_stmt      ::= "loop" block
for_stmt       ::= "for" identifier "in" range_expr block
break_stmt     ::= "break" ";"
return_stmt    ::= "return" expression? ";"

range_expr     ::= expression ".." expression

expression     ::= assignment_expr

assignment_expr::= ternary_expr
                | ternary_expr "=" assignment_expr

ternary_expr   ::= logical_or_expr
                | logical_or_expr "?" expression ":" ternary_expr

logical_or_expr::= logical_and_expr
                | logical_or_expr ("||" | "or") logical_and_expr

logical_and_expr::= equality_expr
                | logical_and_expr ("&&" | "and") equality_expr

equality_expr  ::= relational_expr
                | equality_expr ("==" | "!=") relational_expr

relational_expr::= additive_expr
                | relational_expr ("<" | ">" | "<=" | ">=") additive_expr

additive_expr  ::= multiplicative_expr
                | additive_expr ("+" | "-") multiplicative_expr

multiplicative_expr::= unary_expr
                    | multiplicative_expr ("*" | "/") unary_expr

unary_expr     ::= primary_expr
                | ("-" | "!") unary_expr

primary_expr   ::= literal
                | identifier
                | call_expr
                | member_access
                | scope_access
                | this_expr
                | "(" expression ")"

literal        ::= integer | string
call_expr      ::= primary_expr "(" argument_list? ")"
member_access  ::= primary_expr "." identifier
scope_access   ::= identifier "::" identifier
this_expr      ::= "this"

argument_list  ::= expression ("," expression)*